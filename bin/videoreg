#!/usr/bin/env ruby

require 'rubygems'
require 'ostruct'
require 'optparse'
require 'dante'
require_relative '../lib/videoreg'


def colorize(text, color)
  "\e[#{color}m#{text}\e[0m"
end

def red(text)
  colorize(text, 31)
end

def green(text)
  colorize(text, 32)
end

def blue(text)
  colorize(text, 34)
end

def running_state(is_running)
  is_running ? green("RUNNING") : red("NOT RUNNING")
end


MAX_DEVICES_COUNT = 10

ARGV.options do |parser|
  Videoreg.class_eval {
    parser.banner = "Usage: #{File.basename($0)} [options]"
    parser.on('-c', '--config CONFIG', 'Use the specified config') { |s| opt.script = s }
    parser.on('-d', '--device DEVICE', 'Run only the specified device') { |d| opt.device = d }
    parser.on('-H', '--halt DEVICE', 'Halt (SIGKILL) recording process') { |d| opt.action= :halt; opt.device = d }
    parser.on('-P', '--pause DEVICE', 'Pause (SIGSTOP) recording process') { |d| opt.action= :pause; opt.device= d }
    parser.on('-R', '--resume DEVICE', 'Resume (SIGCONT) recording process') { |d| opt.action= :resume; opt.device= d }
    parser.on('-r', '--recover DEVICE', 'Recover the recording process') { |d| opt.action= :recover; opt.device = d }
    parser.on('-p', '--pid PID', 'Set the PID file for the capture process') { |pid| opt.pid_path = pid }
    parser.on('-l', '--log LOGFILE', 'Set the logfile for daemon') { |log| opt.log_path = log }
    parser.on('-e', '--ensure', 'Check the state of the daemon') { opt.action = :ensure }
    parser.on('-C', '--clear', 'Clear the state (remove lock-files)') { opt.action = :reset }
    parser.on('-k', '--kill', 'Kills the capture processes') { opt.action = :kill }
    parser.on('-v', '--version', 'Show the version') { puts "#{Videoreg.version_info}"; exit }
    parser.on('-h', '--help', 'Show this help message') { puts parser; exit }
    parser.on('-I', '--info', 'Show info about plugged devices') {
      opt.action = :info
      puts "Add these rules to #{green('/etc/udev/rules.d/50-udev-videoreg.rules')} file:"
      Videoreg::Util.udevinfo(MAX_DEVICES_COUNT).each_with_index do |info, index|
        puts <<-RULE
            BUS=="usb" ACTION=="add" DEVPATH=="#{info[:prefix]}#{info[:usbhub]}/#{info[:usbport]}#{info[:postfix]}video*" SYMLINK+="webcam#{index}" GROUP="video"
        RULE
      end
    }
    parser.on('-U', '--udev', 'Generate udev rules for current config') {
      opt.action = :info
      Videoreg::Util.udevinfo(MAX_DEVICES_COUNT).each do |info|
        puts "#{green(info[:usbhub])}[#{blue(info[:usbport])}] --> #{blue(info[:device])}"
      end
    }
    parser.parse!

    case
      when opt.action == :info
        # do nothing
      when opt.script then
        unless File.exists?(opt.script)
          puts "File #{opt.script} does not exist!"
          exit
        end
        begin
          eval(File.open(File.expand_path(opt.script)).read)
          res = run(opt.device, opt.action)

          case opt.action
            when :ensure
              puts "#{blue("DAEMON")}:\t\t [#{running_state(res[0][:daemon_running?])}]"
              puts "Uptime:\t\t #{Videoreg::Util.humanize(res[0][:uptime])}" if res[0][:daemon_running?]
              res[1..-1].each do |status|
                proc_status = if status[:device_exists?] then
                                status[:paused?] ? red("PAUSED") : running_state(status[:process_alive?])
                              else
                                red("NO DEVICE")
                              end
                puts "#{status[:device]}: \t [#{proc_status}]"
              end
            else
          end
        rescue => e
          puts "An error has occured during config processing: #{e.message} \n #{e.backtrace.join("\n")}"
        end
      else
        puts parser
    end
  }
end

